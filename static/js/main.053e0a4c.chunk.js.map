{"version":3,"sources":["Pages/SinglePlayer/SinglePlayer.js","logo.svg","App.js","reportWebVitals.js","index.js","Pages/SinglePlayer/SinglePlayer.module.css"],"names":["require","config","audioContext","window","AudioContext","webkitAudioContext","recognition","SpeechRecognition","webkitSpeechRecognition","interimTranscript","finalTranscript","SinglePlayer","state","listening","sentence","handleChange","event","preventDefault","target","name","value","setState","toggleListen","resume","start","onend","continous","maxAlternatives","interimResults","lang","onresult","i","resultIndex","results","length","transcript","isFinal","transcriptArr","split","close","stop","console","log","className","Styles","wrapper","Container","container","Button","onClick","this","button","Component","App","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"iRAIAA,EAAQ,IAAUC,SAGlB,IACIC,EAAe,IADAC,OAAOC,cAAgBD,OAAOE,oBAM7CC,EAAc,IADhBH,OAAOI,mBAAqBJ,OAAOK,yBAIjCC,EAAoB,GACpBC,EAAkB,GA8EPC,E,4MA3EbC,MAAQ,CACNC,WAAW,EACXC,SAAU,I,EAiBZC,aAAe,SAACC,GACdA,EAAMC,iBACN,MAAwBD,EAAME,OAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACd,EAAKC,SAAL,eACGF,EAAOC,K,EAKZE,aAAe,YACgB,IAAzB,EAAKV,MAAMC,WACbX,EAAaqB,SACbjB,EAAYkB,QACZlB,EAAYmB,MAAQ,WAClBnB,EAAYkB,SAEdlB,EAAYoB,WAAY,EACxBpB,EAAYqB,gBAAkB,GAC9BrB,EAAYsB,gBAAiB,EAC7BtB,EAAYuB,KAAO,QACnBvB,EAAYwB,SAAW,SAACd,GACtBP,EAAoB,GACpB,IAAK,IAAIsB,EAAIf,EAAMgB,YAAaD,EAAIf,EAAMiB,QAAQC,OAAQH,IAAK,CAC7D,IAAMI,EAAanB,EAAMiB,QAAQF,GAAG,GAAGI,WACnCnB,EAAMiB,QAAQF,GAAGK,QAAS1B,GAAmByB,EAAa,IACzD1B,GAAqB0B,EAE5B,IAAME,EAAgB3B,EAAgB4B,MAAM,MAC5C,EAAKjB,SAAS,CAAEP,SAAUuB,EAAc,MAE1C,EAAKhB,SAAS,CAAER,WAAW,MACO,IAAzB,EAAKD,MAAMC,YACpBX,EAAaqC,QACbjC,EAAYkC,OACZlC,EAAYmB,MAAQ,cAEtBgB,QAAQC,IAAIjC,GACZgC,QAAQC,IAAIhC,GACZ+B,QAAQC,IAAI,EAAK9B,MAAME,W,uDApDzB,WACE2B,QAAQC,IAAI,Y,kCAEd,WACED,QAAQC,IAAI,c,gCAEd,WACED,QAAQC,IAAI,a,oBAgDd,WACE,OACE,mCACE,qBAAKC,UAAWC,IAAOC,QAAvB,SACE,cAACC,EAAA,EAAD,CAAWH,UAAWC,IAAOG,UAA7B,SACE,cAACC,EAAA,EAAD,CAAQC,QAASC,KAAK5B,aAAcqB,UAAWC,IAAOO,OAAtD,kC,GAlEeC,aCnBZ,MAA0B,iC,MCiB1BC,MAbf,WACE,OACE,mCACE,qBAAKV,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKW,IAAKC,EAAMZ,UAAU,WAAWa,IAAI,SACzC,cAAC,EAAD,YCEKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,QAAU,8BAA8B,OAAS,gC","file":"static/js/main.053e0a4c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Styles from \"./SinglePlayer.module.css\";\r\nrequire(\"dotenv\").config();\r\n\r\n// Creating a new instance of AudioContext to allow the program to access the microphone\r\nvar AudioContext = window.AudioContext || window.webkitAudioContext;\r\nvar audioContext = new AudioContext();\r\n\r\n// Creating a new instance of SpeechRecognition to allow the microphone to record\r\nvar SpeechRecognition =\r\n  window.SpeechRecognition || window.webkitSpeechRecognition;\r\nvar recognition = new SpeechRecognition();\r\n\r\n// Global Variables of the transcribing/analysis of spoken sentences and final result\r\nlet interimTranscript = \"\";\r\nlet finalTranscript = \"\";\r\n\r\nclass SinglePlayer extends Component {\r\n  state = {\r\n    listening: false,\r\n    sentence: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    console.log(\"Mount:\");\r\n  }\r\n  componentWillUnmount() {\r\n    console.log(\"Unmount:\");\r\n  }\r\n  componentDidUpdate() {\r\n    console.log(\"Update:\");\r\n    // console.log(interimTranscript);\r\n    // console.log(finalTranscript);\r\n    // console.log(this.state.sentence);\r\n  }\r\n\r\n  // Handling event change\r\n  handleChange = (event) => {\r\n    event.preventDefault();\r\n    const { name, value } = event.target;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  // Toggle button to turn on/off the microphone\r\n  toggleListen = () => {\r\n    if (this.state.listening === false) {\r\n      audioContext.resume();\r\n      recognition.start();\r\n      recognition.onend = () => {\r\n        recognition.start();\r\n      };\r\n      recognition.continous = true;\r\n      recognition.maxAlternatives = 10;\r\n      recognition.interimResults = true;\r\n      recognition.lang = \"en-US\";\r\n      recognition.onresult = (event) => {\r\n        interimTranscript = \"\";\r\n        for (let i = event.resultIndex; i < event.results.length; i++) {\r\n          const transcript = event.results[i][0].transcript;\r\n          if (event.results[i].isFinal) finalTranscript += transcript + \" \";\r\n          else interimTranscript += transcript;\r\n        }\r\n        const transcriptArr = finalTranscript.split(\"  \");\r\n        this.setState({ sentence: transcriptArr[0] });\r\n      };\r\n      this.setState({ listening: true });\r\n    } else if (this.state.listening === true) {\r\n      audioContext.close();\r\n      recognition.stop();\r\n      recognition.onend = () => {};\r\n    }\r\n    console.log(interimTranscript);\r\n    console.log(finalTranscript);\r\n    console.log(this.state.sentence);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className={Styles.wrapper}>\r\n          <Container className={Styles.container}>\r\n            <Button onClick={this.toggleListen} className={Styles.button}>\r\n              Click Here\r\n            </Button>\r\n          </Container>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SinglePlayer;\r\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import SinglePlayer from \"./Pages/SinglePlayer/SinglePlayer\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <SinglePlayer />\n        </header>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"SinglePlayer_wrapper__18vlV\",\"button\":\"SinglePlayer_button__1fwNq\"};"],"sourceRoot":""}